setwd('/Users/smrsp/lung cancer/DATA')
install.packages('Seurat', repos = c('https://satijalab.r-universe.dev'))
install.packages("Seurat")
library(Seurat)
library(SeuratObject)
library(dplyr)
BiocManager::install('dbscan')
library(dbscan)
library(ggplot2)
library(Matrix)
library(tidyverse)
install.packages('viridisLite')
library(viridis)
library(ggpubr)

sample_seurat <- Seurat::Load10X_Spatial(data.dir = 'LCB/',
                                         filename = "filtered_feature_bc_matrix.h5",
                                         filter.matrix = F)

SpatialFeaturePlot(sample_seurat,features = 'FGG',pt.size.factor = 0.8)
## tissue refer to "spots on tissue"  ------------------------------------------------

coldata <- GetTissueCoordinates(sample_seurat,
                                cols = c("row", "col", "tissue"),
                                scale = NULL)

sample_seurat$tissue <- coldata[rownames(sample_seurat@meta.data), "tissue"]

sample_seurat$tissue <- ifelse(sample_seurat$tissue == 1, 
                               "on_tissue", 
                               "not_on_tissue")

table(sample_seurat$tissue)

rm(coldata)

# Filter useful spots  ------------------------------------------------

sample_seurat <- subset(sample_seurat, subset = tissue == "on_tissue")


#Before filtering  ------------------------------------------------

sample_seurat[["orig.ident"]] <- 'LCB'

# Get mitochondrial genes percentage ------------------------------------------------
sample_seurat[["percent.mt"]] <- PercentageFeatureSet(sample_seurat, 
                                                      pattern = "^MT-")



# Process the data, After filtering  ------------------------------------------------

# Exclude MT and ribosomal genes ------------------------------------------------------

# Ribosomal and mitochondrial genes are taken out
mt_genes <- row.names(sample_seurat)[grepl("^MT-", row.names(sample_seurat))]
rps_genes <- row.names(sample_seurat)[grepl("^RPS", row.names(sample_seurat))]
mrp_genes <- row.names(sample_seurat)[grepl("^MRP", row.names(sample_seurat))]
rpl_genes <- row.names(sample_seurat)[grepl("^RPL", row.names(sample_seurat))]
rb_genes <- c(rps_genes, mrp_genes, rpl_genes)


## Delete genes but not cells! Or spots will be lost a lot 
sample_seurat <- sample_seurat[!rownames(sample_seurat) %in% c(rb_genes, mt_genes), ]

#Genes expressed in less that 10 spots are filtered
sample_seurat <- sample_seurat[rowSums(GetAssayData(sample_seurat, assay = "Spatial") > 0) > 10, ]

# Then re-calculate the number of genes and reads per spot
sample_seurat$nFeature_Spatial_filt <- colSums(GetAssayData(sample_seurat, assay = "Spatial") > 0)
sample_seurat$nCount_Spatial_filt <- colSums(GetAssayData(sample_seurat, assay = "Spatial"))

# Delete cells
sample_seurat <- subset(sample_seurat, 
                        subset = nFeature_Spatial_filt > 300 & 
                          nCount_Spatial_filt > 500)




sample_seurat[["percent.mt_filt"]] <- PercentageFeatureSet(sample_seurat, 
                                                           pattern = "^MT-")
slide_qc_p <- SpatialFeaturePlot(sample_seurat,
                                 features = c("nCount_Spatial_filt", 
                                              "nFeature_Spatial_filt", 
                                              "percent.mt_filt"),
                                 ncol = 3)

slide_qc_p 


# SCT transform normalization ---------------------------------------------------------
library(future)
options(future.globals.maxSize = 8000 * 1024^2)
sample_seurat<- SCTransform(sample_seurat, 
                            assay = "Spatial", 
                            verbose = FALSE)
# cpm normalization ---------------------------------------------------------
sample_seurat <- NormalizeData(sample_seurat, 
                               normalization.method = 'LogNormalize', 
                               scale.factor = 10000, 
                               verbose = FALSE)

# dimensionality reduction --------------------------------------------------
DefaultAssay(sample_seurat) <- "SCT"

sample_seurat <- ScaleData(sample_seurat, 
                           verbose = FALSE, 
                           features = rownames(sample_seurat)) %>%
  RunPCA() %>%
  RunUMAP(reduction = 'pca', dims = 1:30, verbose = FALSE)

SpatialFeaturePlot(sample_seurat,features = 'FGG',pt.size.factor = 1)
sample_seurat <- FindNeighbors(sample_seurat, reduction = "pca", dims = 1:30)
sample_seurat <- FindClusters(sample_seurat)
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
cols = col_vector[10:40]
saveRDS(sample_seurat,file ='sample_seurat.RDS')
sample_seurat=readRDS('./sample_seurat.RDS')
SpatialDimPlot(sample_seurat,
               label = TRUE,pt.size.factor = 1, 
               label.size = 0,
               stroke = 0, 
               label.box = F)

# Save data
saveRDS(sample_seurat, file = './stRNA.RDS')
devtools::install_github("dmcable/spacexr")
#RCTD---------------
library(Seurat)
library(tidyverse)
library(Matrix)
library(spacexr)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(reshape2)
library(readr)
library(config)
library(ggpubr)
library(gridExtra)
library(reshape2)
library(png)
library(patchwork)
library(SingleR)
library(celldex)

as_matrix <- function(mat){
  row_pos <- mat@i
  col_pos <- findInterval(seq(mat@x)-1,mat@p[-1])
  tmp <- asMatrix(rp = row_pos, cp = col_pos, z = mat@x,
                  nrows =  mat@Dim[1], ncols = mat@Dim[2])
  row.names(tmp) <- mat@Dimnames[[1]]
  colnames(tmp) <- mat@Dimnames[[2]]
  return(tmp)
}

library(spacexr)
library(tidyverse)

scRNA=readRDS('../scRNA_FGG.RDS')
table(scRNA$gene_group)
scRNA=subset(scRNA,gene_group != 'unclassified')
sc_counts <- as_matrix(scRNA[['RNA']]@counts)
sc_nUMI = colSums(sc_counts)
head(sc_nUMI)
cellType=data.frame(barcode=colnames(scRNA), celltype=scRNA$gene_group) #!!!!
gc()
names(cellType) = c('barcode', 'cell_type')
cell_types = cellType$cell_type; names(cell_types) <- cellType$barcode # create cell_types named list
cell_types =as.factor(cell_types) # convert to factor data type
cell_types

## construct referrence scRNA
reference = Reference(sc_counts, cell_types, sc_nUMI)

stRNA=readRDS('./stRNA.RDS')
coords <- GetTissueCoordinates(stRNA,
                               cols = c("row", "col"),
                               scale = NULL) 

colnames(coords)=c('xcoord','ycoord')
sp_counts <- as_matrix(stRNA[['Spatial']]@counts)
sp_nUMI <- colSums(sp_counts)

# construct spatial 

puck <- SpatialRNA(coords, sp_counts, sp_nUMI)
myRCTD <- create.RCTD(puck, reference)

myRCTD <- run.RCTD(myRCTD, doublet_mode = 'full') #run.RCTD
save(myRCTD,file ='RCTD.Rdata')

load('./RCTD.Rdata')

weight=myRCTD@results$weights
weight=as.data.frame(weight)

write.csv(weight,file ='weight_RCTD.csv',quote = F)

stRNA=readRDS('./stRNA.RDS')

library(Seurat)
stRNA=stRNA[,rownames(weight)]
stRNA@meta.data=cbind(stRNA@meta.data,weight)

colnames(stRNA@meta.data)
SpatialFeaturePlot(stRNA,features = 'FGG-Mali')
SpatialFeaturePlot(stRNA,features = 'FGG+Mali')
SpatialFeaturePlot(stRNA,features = 'CAF')
SpatialFeaturePlot(stRNA,features = 'TAM')
SpatialFeaturePlot(stRNA,features = 'Endothelial cell')


## mistyR分析--------------------------------
BiocManager::install('mistyR')
library(mistyR)
setwd('G:/smrsp2/')
load('RCTD.Rdata')
stRNA=readRDS('./stRNA.RDS')
library(Seurat)
weight=myRCTD@results$weights
weight=as.data.frame(weight)
stRNA=stRNA[,rownames(weight)]

SpatialDimPlot(stRNA)

library(tidyverse)
library(Seurat)
library(mistyR)
source("./misty_utilities.R")

future::plan(future::multisession)

run_colocalization <- function(slide, 
                               assay, 
                               useful_features, 
                               out_label, 
                               misty_out_alias = "./results/tissue_structure/misty/cell_map/cm_") {
  
  # Define assay of each view ---------------
  view_assays <- list("main" = assay,
                      "juxta" = assay,
                      "para" = assay)
  # Define features of each view ------------
  view_features <- list("main" = useful_features, 
                        "juxta" = useful_features,
                        "para" = useful_features)
  # Define spatial context of each view -----
  view_types <- list("main" = "intra", 
                     "juxta" = "juxta",
                     "para" = "para")
  # Define additional parameters (l in case of paraview,
  # n of neighbors in case of juxta) --------
  view_params <- list("main" = NULL, 
                      "juxta" = 5,
                      "para" = 15)
  
  misty_out <- paste0(misty_out_alias, 
                      out_label, "_", assay)
  
  run_misty_seurat(visium.slide = slide,
                   view.assays = view_assays,
                   view.features = view_features,
                   view.types = view_types,
                   view.params = view_params,
                   spot.ids = NULL,
                   out.alias = misty_out)
  
  return(misty_out)
}


# 开始运行 ------------------------------------------------------------------------
# read spatial data and RCTD result


# Getting sample annotations (proportion)--------------------------------------------------
prop=as.matrix(myRCTD@results$weights)
colnames(prop)=stringr::str_replace(colnames(prop),'\\+','_pos_')


dim(prop)
dim(stRNA)

# you can use spotlight to visualize
library(SPOTlight)
#BiocManager::install("SPOTlight")
plotCorrelationMatrix(prop)
plotInteractions(prop, "heatmap")
plotInteractions(prop, "network")



# create assay prepare
stRNA[["RCTD_props"]] <- CreateAssayObject(t(prop))

assay_label <- "RCTD_props"

slide=stRNA
rm(stRNA)

slide_file ='stRNA.RDS'
slide_id='stRNA'

# set label
assay <- assay_label
DefaultAssay(slide) <- assay
useful_features <- rownames(slide)

dir.create('misty')
mout <- run_colocalization(slide = slide,
                           useful_features = useful_features,
                           out_label = slide_id,
                           assay = assay,
                           misty_out_alias = "./misty/")

misty_res_slide <- collect_results(mout)

mistyR::plot_improvement_stats(misty_res_slide)
mistyR::plot_view_contributions(misty_res_slide)

mistyR::plot_interaction_heatmap(misty_res_slide, "intra", cutoff = 0)
mistyR::plot_interaction_communities(misty_res_slide, "intra", cutoff = 0.5)

mistyR::plot_interaction_heatmap(misty_res_slide, "juxta_5", cutoff = 0)
mistyR::plot_interaction_communities(misty_res_slide, "juxta_5", cutoff = 0.5)

mistyR::plot_interaction_heatmap(misty_res_slide, "para_15", cutoff = 0)
mistyR::plot_interaction_communities(misty_res_slide, "para_15", cutoff = 0.5)
